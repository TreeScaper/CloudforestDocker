<tool id="treescaper-trees" name="TreeScaper-Trees" version="@TOOL_VERSION@+galaxy1">
    <description>Phylogenomic / Compute a majority rule/strict consensus tree, distance matrix, bipartition matrix or covariance matrix.</description>
    <macros>
        <import>treescaper_macros.xml</import>
    </macros>
    <command detect_errors="exit_code">
        <![CDATA[
            #set $linked_name = "dummy_link.dat"

            #if $subsample_selector == "random_subsample" 
                python $__tool_directory__/subsample.py $input_file $sample_size &&
                ln -s subsampled.file  "${linked_name}" &&
            #else if $subsample_selector == 'random_interval_subsample'
                python $__tool_directory__/subsample.py $input_file $sample_size interval &&
                ln -s subsampled.file  "${linked_name}" &&
            #else
                ln -s "${input_file}"  "${linked_name}" &&
            #end if

            $__tool_directory__/CLVTreeScaper
                -trees
                -f  $linked_name
                -o $tree_output.output_type
                -w $weigted_tree
                -r $rooted_tree
                -s $seed
                -c $scalar
                #if $tree_output.output_type == "Dist"
                    -dm $tree_output.dm
                    -dfm $tree_output.dfm
                    -post dist
                #end if
                #if $tree_output.output_type == "Cova"
                    -post cova
                #end if
                #if $tree_output.output_type == "Consensus"
                    #if $tree_output.if
                        -if $tree_output.if
                    #end if
                    -ct $tree_output.ct
                    -cfm $tree_output.cfm
                    -post consensus
                #end if
                #if $tree_output.output_type == "Bipartition"
                    -post bipartition
                #end if
        ]]>
    </command>
    <inputs>
        <param name="input_file" argument="-f" type="data" format="cloudforest.trees" label="Input file" />
        
        <conditional name="tree_output">
            <param name="output_type" argument="-o" type="select" label="Output Type">
                <option value="Dist" selected="true">Dist</option>
                <option value="Consensus">Consensus</option>
                <option value="Cova">Covariance</option>
                <option value="Bipartition">Bipartition only</option>
            </param>
            <when value="Consensus">
                <param argument="-if" type="data" format="txt" label="List file" optional="true" />
                <param argument="-ct" type="select" label="Consensus tree type">
                    <option value="Majority" selected="true">Majority consensus tree</option>
                    <option value="Strict">Strict consensus tree</option>
                </param>
                <param argument="-cfm" type="select" label="Consensus tree format">
                    <option value="Newick" selected="true">Newick</option>
                    <option value="Nexus">Nexus</option>
                </param>
            </when>
            <when value="Dist">
                <param argument="-dm" type="select" label="Distance metric">
                    <option value="URF" selected="true">Unweighted Robinson-Foulds distance</option>
                    <option value="RF">Weighted Robinson-Foulds distance</option>
                    <option value="Mat">Matching distance</option>
                    <option value="SPR">Subtree-Prune-Regraft</option>
                </param>
                <param argument="-dfm" type="select" label="Distance matrix format">
                    <option value="matrix" selected="true">Matrix</option>
                    <option value="list">List</option>
                    <help>
                        <![CDATA[
                            Format of output symmetric matrix. "Matrix" outputs a matrix in dense lower triangular form,
                            whereas "List" outputs a list of indices and entries.
                        ]]>
                    </help>
                </param>
            </when>
        </conditional>
        <param name="weigted_tree" argument="-w" type="select" label="Weighted/Unweighted Tree">
            <option value="0" selected="true">Unweighted</option>
            <option value="1">Weighted</option>
        </param>
        <param name="rooted_tree" argument="-r" type="select" label="Rooted/Unrooted Tree">
            <option value="0" selected="true">Unrooted</option>
            <option value="1">Rooted</option>
        </param>
        <param name="subsample_selector" type="select" label="Subsample Tree Input">
            <option value="no_subsample" selected="true">No subsampling</option>
            <option value="random_subsample">Random subsampling</option>
            <option value="random_interval_subsample">Regular interval random subsampling</option>
            <help>
                <![CDATA[
                You can subsample the input tree set in two ways: randomly selecting a new sample from the 
                original treeset, or randomly selecting a new sample across regular intervals of the original tree set.
                This guarantees coverage across the set from tree 1 to tree n. 
                ]]>
            </help>
        </param>
        <param name="sample_size" type="integer" value="1" label="Size" />
        <param name="seed" argument="-s" type="integer" value="1" label="Random seed for hash function."/>
        <param name="scalar" argument="-c" type="integer" value="1000" label="Scalar of prime number p > cnl that is used as the range of the unique label of bitstring hv2."/>
        
    </inputs>
    <outputs>
        <data name="taxa_ids" format="cloudforest.text" from_work_dir="Taxon*" label="Taxa IDs from ${on_string}">
            <filter>tree_output["output_type"] in ["Bipartition", "Dist", "Cova"]</filter>
        </data>
        <data name="bipartition_count" format="cloudforest.text" from_work_dir="Bipartition_Count_cova.out" label="Bipartition Counts from ${on_string}">
            <filter>tree_output["output_type"] in ["Bipartition", "Dist", "Cova"]</filter>
        </data>
        <data name="bipartition_matrix_dist" format="cloudforest.bipartition" from_work_dir="Bipartition_dist.out" label="Bipartition Matrix from ${on_string}">
            <filter>tree_output["output_type"] == "Dist"</filter>
        </data>
        <data name="bipartition_matrix_cova" format="cloudforest.bipartition" from_work_dir="Bipartition_cova.out" label="Bipartition Matrix from ${on_string}">
            <filter>tree_output["output_type"] == "Cova"</filter>
        </data>
        <data name="bipartition_matrix_bipartition" format="cloudforest.bipartition" from_work_dir="Bipartition_bipartition.out" label="Bipartition Matrix from ${on_string}">
            <filter>tree_output["output_type"] == "Bipartition"</filter>
        </data>
        <data name="covariance_matrix" format="cloudforest.covariance" from_work_dir="*Covariance_cova.out" label="Covariance Matrix from ${on_string}">
            <filter>tree_output["output_type"] == "Cova"</filter>
        </data>
        <data name="distance" format="cloudforest.distance" from_work_dir="Distance_dist.out" label="Distance Matrix from ${on_string}">
            <filter>tree_output["output_type"] == "Dist"</filter>
        </data>
        <data name="cons_tree" format="nex" from_work_dir="Consensus_consensus.out" label="Consensus Tree from ${on_string}">
            <filter>tree_output["output_type"] == "Consensus"</filter>
        </data>
    </outputs>
    <help>
        <![CDATA[
TreeScaper
==========

Quick tutorial for using TreeScaper.

Overview
--------

TreeScaper allows users to accomplish many different tasks, including (i) computing pairwise distances between trees with a variety of different metrics, (ii) projecting and visualizing trees in low dimensional Euclidean space, (iii) estimating the intrinsic dimensionality of the space formed by the tree set, (iv) computing the covariance matrix of bipartition presence/absence across trees, and (v) finding communities of bipartitions or trees using state-of-the-art community detection methods. Many of these functions are not available in any other software implementation of which we are aware.

Nonlinear Dimensionality Reduction
----------------------------------

NLDR seeks to find low dimensional representations of a set of high dimensional data. TreeScaper begins by computing pairwise tree distances between trees using one of several metrics, such as Robinson-Foulds (Robinson and Foulds 1981), matching (Bogdanowicz and Giaro 2012), or subtree prune and regraft (SPR) distances (following Whidden et al. 2010). NLDR then looks for low dimensional points {xi} in the Euclidean space that minimize the distortions of pairwise distances.

Community Detection Methods
---------------------------

A network has community structure if its nodes can be easily clustered into sets with dense, internal connections. In phylogenetic analysis, community structure can be used to identify distinct topological signals. TreeScaper uses two distinct network types to accomplish this: networks of trees or bipartitions. 
    ]]>
    </help>
    <citations>
        <citation type=" doi">10.1093/molbev/msw196</citation>
    </citations>

</tool>
