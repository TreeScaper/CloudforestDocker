<tool id="treescaper-nldr" name="TreeScaper-NLDR" version="@TOOL_VERSION@">
    <description>Phylogenomic / Project trees into lower dimensional space using non-linear dimensionality reduction (NLDR).</description>
    <macros>
        <import>treescaper_macros.xml</import>
    </macros>
    <!-- ./CLVTreeScaper -nldr -trees -f working_dir/Distance_test.out -t DIS -d 3 -c CCA -a STOCHASTIC -i RAND -post NLDR_3D-->
    <command detect_errors="exit_code">
        <![CDATA[
            #set $linked_name = 'dummy_link.dat'
            ln -s "${input_file}"  "${linked_name}" &&
            cp "${__tool_directory__}/nldr_parameters.csv" nldr_parameters.csv &&
            $__tool_directory__/CLVTreeScaper 
                -nldr
                -f $linked_name
                -t $distance_type
                -d $dimension
                -c $cost_function
                -a $nldr_algorithm
                -i $coordinate_generate
                -post "NLDR_${dimension}D"
                >>run_log.log 2>&1
        ]]>
    </command>
    <inputs>
        <param name="input_file" argument="-f" type="data" format="txt" label="Input file" />
        <param name="distance_type" argument="-t" type="select" label="Distance type">
            <help>
                <![CDATA[
                The type of distances contained in the file. Options are: 
                    'DIS':a lower triangle matrix of original distances 
                    'COR':low-dimensional Euclidean coordinates
                ]]>
            </help>
            <option value="DIS" selected="true">DIS</option>
            <option value="COR">COR</option>
        </param>
        <param name="dimension" argument="-d" type="integer" value="3" label="Euclidean Dimension" />
        <param name="cost_function" argument="-c" type="select" label="Cost Function">
            <option value="CLASSIC_MDS">CLASSIC_MDS</option>
            <option value="KRUSKAL1">KRUSKAL1</option>
            <option value="NORMALIZED">NORMALIZED</option>
            <option value="SAMMON">SAMMON</option>
            <option value="CCA" selected="true">CCA</option>
            <help>
                <![CDATA[
                When running NLDR on trees, CLASSIC_MDS should not be used.
                ]]>
            </help>
        </param>
        <param name="nldr_algorithm" argument="-a" type="select" label="NLDR Algorithm">
            <option value="LINEAR_ITERATION" >LINEAR_ITERATION</option>
            <option value="MAJORIZATION">MAJORIZATION</option>
            <option value="GAUSS_SEIDEL">GAUSS_SEIDEL</option>
            <option value="STOCHASTIC" selected="true">STOCHASTIC</option>
            <option value="METROPOLIS">METROPOLIS</option>
            <help>
                <![CDATA[
                When using CCA as the cost function, the available algorithms are MAJORIZATION, GAUSS_SEIDEL and STOCHASTIC.
                ]]>
            </help>
        </param>
        <param name="coordinate_generate" argument="-i" type="select" label="Generating Euclidean Coordinates">
            <option value="RAND" selected="true">RAND</option>
            <option value="CLASSIC_MDS">CLASSIC_MDS</option>
            <help>
                <![CDATA[
                'RAND': Randomly choose coordinates for each point. 
                'CLASSIC_MDS': Generate initial coordinates using classic multi-dimensional scaling (MDS).
                ]]>
            </help>
        </param>
    </inputs>
    <outputs>
        <data name="runlog" format="cloudforest" from_work_dir="run_log.log" label="NLDR_log" />
        <data name="nldr_coordinates" format="cloudforest" from_work_dir="Coordinates_NLDR_*.out" label="NLDR_Dim_${dimension}_Coordinates"/>
        <data name="nldr_distance" format="cloudforest" from_work_dir="Distance_NLDR_3D.out" label="NLDR_Dim_${dimension}_Distance"/>
    </outputs>
    <help>
        <![CDATA[
TreeScaper
==========

Quick tutorial for using TreeScaper.

Overview
--------

TreeScaper allows users to accomplish many different tasks, including (i) computing pairwise distances between trees with a variety of different metrics, (ii) projecting and visualizing trees in low dimensional Euclidean space, (iii) estimating the intrinsic dimensionality of the space formed by the tree set, (iv) computing the covariance matrix of bipartition presence/absence across trees, and (v) finding communities of bipartitions or trees using state-of-the-art community detection methods. Many of these functions are not available in any other software implementation of which we are aware.

Nonlinear Dimensionality Reduction
----------------------------------

NLDR seeks to find low dimensional representations of a set of high dimensional data. TreeScaper begins by computing pairwise tree distances between trees using one of several metrics, such as Robinson-Foulds (Robinson and Foulds 1981), matching (Bogdanowicz and Giaro 2012), or subtree prune and regraft (SPR) distances (following Whidden et al. 2010). NLDR then looks for low dimensional points {xi} in the Euclidean space that minimize the distortions of pairwise distances.

Community Detection Methods
---------------------------

A network has community structure if its nodes can be easily clustered into sets with dense, internal connections. In phylogenetic analysis, community structure can be used to identify distinct topological signals. TreeScaper uses two distinct network types to accomplish this: networks of trees or bipartitions. 
    ]]>
    </help>
    <citations>
        <citation type="doi">10.1093/molbev/msw196</citation>
    </citations>

</tool>